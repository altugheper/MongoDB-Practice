use school
db.createCollection("students")

db.insertMany([ {"name":"Ahmet Ümit", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"tr"}},
 {"name":"R.Nuri Güntekin",  "age":43, "city":"Ankara",  "grade":567, "department":{"name":"Math","language":"eng"}},
 {"name":"S.Faik Abasıyanık","age":55, "city":"Antalya", "grade":409, "department":{"name":"Chemistry","language":"eng"}},
 {"name":"Yaşar Kemal",      "age":23, "city":"İstanbul","grade":390, "department":{"name":"English","language":"eng"}},
 {"name":"Halide E. Adıvar", "age":26, "city":"İzmir",   "grade":523, "department":{"name":"Math","language":"tr"}},
 {"name":"Charles Dickens", "age":35, "city":"İstanbul","grade":463, "department":{"name":"IT","language":"eng"}},
 {"name":"Nazan Bekiroğlu",  "age":49, "city":"Bursa",   "grade":387, "department":{"name":"English","language":"eng"}},
 {"name":"Sabahattin Ali",   "age":53, "city":"İzmir",   "grade":427, "department":{"name":"Physics","language":"tr"}},
 {"name":"Stephen King",   "age":53, "city":"İzmir",   "grade":523, "department":{"name":"Physics","language":"eng"}},
 {"name":"Orhan Pamuk",      "age":56, "city":"Ankara",  "grade":486, "department":{"name":"Psychology","language":"tr"}},
 {"name":"Rıfat Ilgaz" ,     "age":74, "city":"Antalya", "grade":519, "department":{"name":"IT","language":"eng"}},
 {"name":"Lev Tolstoy" ,     "age":26, "city":"Antalya", "grade":520, "department":{"name":"IT","language":"eng"}}])

//--------------------------------------------
//1) Sort age as descending in "students" DB
//--------------------------------------------
use ("school");
db.students.find().sort({"age":-1})

//--------------------------------------------
//2) Get the second oldest student in student collection, show name and age
//--------------------------------------------
use ("school");
db.students.find({},{"name":1,"age":1,"_id":0}).sort({"age":-1}).skip(1).limit(1)

//--------------------------------------------
//3) Get the youngest student in student collection, show name and age
//--------------------------------------------
use ("school");
db.students.find({},{"name":1,"age":1,"_id":0}).sort({"age":1}).limit(1)

//--------------------------------------------
//4) Get the data of those whose grade is more 500 and their language is turkish. Show name, department and grade
//--------------------------------------------
use ("school");
db.students.find({"department.language":"tr","grade":{$gt:500}},{"name":1,"department":1,"grade":1,"_id":0})

//--------------------------------------------
//5) Sort students by name with asc order whose departments are: IT, Math, Chemistry. Show name, department
//--------------------------------------------
use ("school");
db.students.find({"department.name":{$in: ["Math","IT","Chemistry"]}},{"name":1,"department":1,"_id":0}).sort({"name":1})

//--------------------------------------------
//6) Sort students by grade with desc order whose cities are: Istanbul, Izmir, Ankara/ Show name, city, grade
//--------------------------------------------
use ("school");
db.students.find({"city": {$in: ["İzmir","İstanbul","Ankara"]}},{"name":1,"city":1,"grade":1,"_id":0}).sort({"grade":-1})

//--------------------------------------------
//7) Get data of students whose lang are eng or their age is 35 or less than 35, Show name, department, age
//--------------------------------------------
use ("school");
db.students.find({$or: [{"department.language":"eng"},{"age":{$lte:35}}]},{"name":1,"department":1,"age":1,"_id":0})

//=====================================================
//=====================================================

//--------------------------------------------
//1) Update "Peyami Safa"s data
//--------------------------------------------
use ("school");
db.students.find({"name":"Peyami Safa"})

use ("school");
db.students.findOneAndReplace({"name":"Peyami Safa"},
                              {"name":"Peyami Safa",
                               "age":33,
                               "city":"Izmir",
                               "grade":455,
                               "department":{"name":"Science","language":"eng"},
                               "books":[{"name":"Science","category":"lesson"},
                               {"name":"LOTR","category":"novel"}]})


//--------------------------------------------
//2) update department to IT for those whose grades are less than 550
//--------------------------------------------
use ("school");
db.students.findOneAndUpdate({"grade":{$lt:550}},{$set: {"department.name":"IT"}},{sort:{"grade":-1}})

//--------------------------------------------
//3) update age to  23 whose name is "Elif Safak" and return the data
//--------------------------------------------
use ("school");
db.students.findOneAndUpdate({"age":23},{$set: {"name":"Elif Safak"}},{returnNewDocument:true})

//--------------------------------------------
//4) update "Kemal Tahir"s data if it exists. If not, add it and return the data
//--------------------------------------------
use ("school");
db.students.findOneAndUpdate({"name":"Kemal Tahir"},
                             {$set: {"age":36,"city":"Konya","grade":411,"department.name":"Chemistry"}},
                             {returnNewDocument:true,upsert:true})

//--------------------------------------------
//5) update city:Istanbul to city:Megakent and return the data
//--------------------------------------------
use ("school");
db.students.updateMany({"city":"İstanbul"},{$set: {"city":"Megakent"}},{returnNewDocument:true})

//--------------------------------------------
//6) Remove who have department name as Physics
//--------------------------------------------
use ("school");
db.students.deleteOne({"department.name":"Physics"})

//--------------------------------------------
//7) Remove whose ages are less than 30 or more than 70
//--------------------------------------------
use ("school");
db.students.deleteMany({$or: [{"age":{$lt:30}},{"age":{$gt:70}}]})

//--------------------------------------------
//8) Remove everything in "students" collection
//--------------------------------------------
use ("school");
db.students.remove({});

//--------------------------------------------
//9) Get average age of each city
//--------------------------------------------
use ("school");
var pipeline = [{$match:{}},
                {$group:{"_id":"$city",average:{$avg:"$age"}}}

];
db.students.aggregate(pipeline)

//--------------------------------------------
//10) get max grade of each department
//--------------------------------------------
use ("school");
var pipeline = [
                {$match : {}},
                {$group: {"_id":"$department.name","max_grade":{$max:"$grade"}}}
];
db.students.aggregate(pipeline);

//--------------------------------------------
//11) get min grade of each department whose ages are more than 40
//--------------------------------------------
use ("school");
var pipeline = [
                {$match: {"age":{$gt:40}}},
                {$group: {"_id":"$department.name","min_grade":{$min:"$grade"}}}
];
db.students.aggregate(pipeline);

//--------------------------------------------
//12) get total grade of those whose name end with "k"
//--------------------------------------------
use ("school");
var pipeline = [
                {$match: {"name":{$regex:"k$"}}},
                {$group: {"_id":"","total_grade": {$sum: "$grade"}}}
];
db.students.aggregate(pipeline);

//--------------------------------------------
//13) get number of people who live in Ankara
//--------------------------------------------
use ("school");
var pipeline = [
                {$match: {"city":"Ankara"}},
                {$count: "Num of people who live in Ankara: "}
];
db.students.aggregate(pipeline);

//--------------------------------------------
//14) get number of people whose age is more than 30
//--------------------------------------------
use ("school");
var pipeline = [
                {$match: {"age":{$gt:30}}},
                {$count: "Num of people who are above 30: "}
];
db.students.aggregate(pipeline);

//=====================================================
//=====================================================

//addFields-bulkWrite-UnionWith-lookup

use("school");
db.points.insertMany([
      {"name":"Fred","homework":[100,100,100],"midterm":[100,100,100]},
      {"name":"Barnie","homework":[10,90,80,100],"midterm":[45,85,90]},
      {"name":"Wilma","homework":[35,40,80,70],"midterm":[80,80,90]},
      {"name":"Betty","homework":[55,78,80,90],"midterm":[45,70,65]}
])

//------------------------------------------------------------------------------
// 1) Add new field for sum of homeworks and midterms
//------------------------------------------------------------------------------
use ("school");
var pipeline=[{$addFields:{avg_homework:{$avg:"$homework"},
                          avg_midterm:{$avg:"$midterm"}}}]
db.points.aggregate(pipeline);

//------------------------------------------------------------------------------
// 2) Add new field for sum of homeworks and midterms. Show name,avg_homework,avg_midterm
//------------------------------------------------------------------------------
use ("school");
var pipeline=[{$addFields:{avg_homework:{$avg:"$homework"},
                          avg_midterm:{$avg:"$midterm"}}},
              {$project:{ _id: 0, name: 1, avg_homework: 1, avg_midterm: 1}}]
db.points.aggregate(pipeline);

//------------------------------------------------------------------------------
// 3) add sum of avg_homework and avg_midterm to points collection as final field, show name,avg_homework,avg_midterm,final
//------------------------------------------------------------------------------
use ("school");
var pipeline=[{$addFields:{avg_homework:{$avg:"$homework"},
                          avg_midterm:{$avg:"$midterm"}}},
              {$addFields: {final:{$add:["$avg_homework","$avg_midterm"]}}},
              {$project:{ _id: 0, name: 1, avg_homework: 1, avg_midterm: 1, final:1}}]
db.points.aggregate(pipeline);

//------------------------------------------------------------------------------
// 4) Sort final value by desc and show name,avg_homework,avg_midterm,final 
//------------------------------------------------------------------------------
use ("school");
var pipeline=[{$addFields:{avg_homework:{$avg:"$homework"},
                          avg_midterm:{$avg:"$midterm"}}},
              {$addFields: {final:{$add:[{ $multiply: ["$avg_homework", 0.5]},
                                          {$multiply: ["$avg_midterm", 0.5]}
                                        ]}}},
              {$project:{ _id: 0, name: 1, avg_homework: 1, avg_midterm: 1, final:1}},
              {$sort:{"final":1}}]
db.points.aggregate(pipeline);


// *****************
// bulkWrite
// *****************

use ("school");
db.staff.insertMany([
 {"name":"Leonardo", "age":35, "city":"Istanbul","salary":4500, "job":"lawyer"},
 {"name":"Raphael",  "age":55, "city":"Ankara",  "salary":9000, "job":"manager"},
 {"name":"Donatello","age":35, "city":"Antalya", "salary":3300, "job":"doctor"},
 {"name":"Michelangelo", "age":36, "city":"Istanbul","salary":4500, "job":"developer"},
 {"name":"Splinter", "age":26, "city":"Izmir", "salary":2500, "job":"analyst"},
 {"name":"April", "age":35, "city":"Istanbul", "salary":3000, "job":"instructor"}
 ])

 //---------------------------------------------------------------------------------------
 // 5) Do everything below in one line
 // a) Add document: {"name":"Shredder",  "age":49, "city":"Konya", "salary":3870, "job":"engineer"}
 // b) Update Michelangelo's salary as 5000
 // c) Delete document which job info is analyst
 //---------------------------------------------------------------------------------------
 use ("school");
db.staff.bulkWrite([
  {insertOne:{"document":{"name":"Shredder",  "age":49, "city":"Konya", "salary":3870, "job":"engineer"}}},
  {updateOne:{"filter":{"name":"Michelangelo"},
              "update":{$set:{"salary":5000}}}},
  {deleteOne:{"filter":{"job":"analyst"}}}
])
use ("school");
db.staff.find()

 //---------------------------------------------------------------------------------------
 // 6) Do everything below in one line
 // a) Add document: {"name":"Ninja",  "age":37, "city":"Isparta", "salary":3000, "job":"analyst"}
 // b) Update doctor as "DR"
 // c) Increase salaries by 1.5 whose ages are 15
 //---------------------------------------------------------------------------------------
 use ("school");
db.staff.bulkWrite([
  {insertOne:{"document":{"name":"Ninja",  "age":37, "city":"Isparta", "salary":3000, "job":"analyst"}}},
  {updateOne:{"filter":{"job":"doctor"},"update":{$set:{"job":"DR"}}}},
  {updateMany:{"filter":{"age":35},"update":{$mul:{"salary":1.5}}}}
])

// *****************
// unionWith
// *****************

use ("school");
db.personel.insertMany([
 {"name":"Tom", "age":33, "city":"Istanbul","salary":4300, "job":"lawyer"},
 {"name":"Jerry",  "age":44, "city":"Ankara",  "salary":7500, "job":"instructor"},
 {"name":"Sylvester","age":34, "city":"Antalya", "salary":6300, "job":"DR"},
 {"name":"Tweety", "age":24, "city":"Istanbul","salary":5400, "job":"developer"},
 {"name":"BugsBunny", "age":32, "city":"Izmir", "salary":2800, "job":"nurse"}
 ])

//------------------------------------------------------------------------------
// 7) Sort all employees' by name and job 
//------------------------------------------------------------------------------
use ("school")
db.personel.aggregate(
  {$unionWith:{coll:"staff"}},
  {$project:{_id:0, name:1,job:1}}
)

//------------------------------------------------------------------------------
// 8) Sort personal and staff by city and show city and name
//------------------------------------------------------------------------------
use ("school")
db.personel.aggregate(
  {$unionWith:{coll:"staff"}},
  {$sort:{"city":1}},
  {$project:{_id:0, name:1,city:1}}
)

//------------------------------------------------------------------------------
// 9) Get average of each city for personal and staff
//------------------------------------------------------------------------------
use ("school")
db.staff.aggregate(
  {$unionWith:{coll:"personel"}},
  {$group:{_id:"$city", avg_age:{$avg:"$age"}}}
)

// *****************
// lookup
// *****************

//------------------------------------------------------------------------------
// 10) Show staff whose jobs are the same. Show name,job,ortak_meslekler
//------------------------------------------------------------------------------
use ("school");
db.personel.aggregate({
$lookup: {
  from: "staff",
  localField: "job",
  foreignField: "job",
  as: "ortak_meslekler"
}},
{$project:{_id:0, name:1,job:1,"ortak_meslekler.name":1}})

use ("school");
db.personel.find()

//------------------------------------------------------------------------------
// 11) show staf who have the same job and their average age. Show name, job, avg_name
//------------------------------------------------------------------------------
use ("school")
db.personel.aggregate({
$lookup: {
  from: "staff",
  localField: "job",
  foreignField: "job",
  as: "ortak_meslekler"
}},
{$unwind:{path:"$ortak_meslekler"}},
{$project:{_id:0, name:1,job:1,
            nameStaff:"$ortak_meslekler.name",
            avg_age:{$avg:["$age","$ortak_meslekler.age"]}
          }})
